<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="ButtonSendTicket" xml:space="preserve">
    <value>发券</value>
  </data>
  <data name="Count" xml:space="preserve">
    <value>张！</value>
  </data>
  <data name="LeaveTicketCount" xml:space="preserve">
    <value>还可生成券张数：</value>
  </data>
  <data name="PackageCode" xml:space="preserve">
    <value>领用券包代码：</value>
  </data>
  <data name="PackageList" xml:space="preserve">
    <value>优惠券列表</value>
  </data>
  <data name="PackageName" xml:space="preserve">
    <value>优惠券礼包</value>
  </data>
  <data name="PromptActualCreate" xml:space="preserve">
    <value>,而实际想生成</value>
  </data>
  <data name="PromptCodeHaveFinish" xml:space="preserve">
    <value>所有抵用券Code使用超过数量，没法产生一个新的抵用券Code了！</value>
  </data>
  <data name="PromptHaveSamePhone" xml:space="preserve">
    <value>输入的手机号码中存在相同的号码，重复的号码为：</value>
  </data>
  <data name="PromptInputPhone" xml:space="preserve">
    <value>请输入用户手机号</value>
  </data>
  <data name="PromptLeaveCount" xml:space="preserve">
    <value>该优惠券剩余张数小于本次想生成的数量。剩余可用张数为</value>
  </data>
  <data name="PromptPackageHaveFinish" xml:space="preserve">
    <value>该优惠券礼包已经被领用完！</value>
  </data>
  <data name="PromptPhoneFormatError" xml:space="preserve">
    <value>输入的手机号码格式不正确，输入的号码为：</value>
  </data>
  <data name="PromptPhoneNoInput" xml:space="preserve">
    <value>电话号码输入框中没有输入数据！</value>
  </data>
  <data name="PromptTicketCodeNoEmpty" xml:space="preserve">
    <value>领用券代码不能为空！</value>
  </data>
  <data name="PromptTicketCountMustOne" xml:space="preserve">
    <value>该优惠券包内含的券和张数都必须为1！</value>
  </data>
  <data name="PromptTicketFaild" xml:space="preserve">
    <value>生成抵用券失败！</value>
  </data>
  <data name="PromptTicketNotUse" xml:space="preserve">
    <value>该优惠券礼包不可用！</value>
  </data>
  <data name="PromptTicketSuccess" xml:space="preserve">
    <value>生成抵用券成功！</value>
  </data>
  <data name="RemarkDesc" xml:space="preserve">
    <value>&lt;strong&gt; &amp;nbsp;给指定用户发优惠券的规则说明&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
           &amp;nbsp;(1).每次只能对电话号码发券。&lt;br /&gt;&lt;br /&gt;
           &amp;nbsp;(2).优惠券礼包中只能包含一种金额的券，且必须为1张券。&lt;br /&gt;&lt;br /&gt;
           &amp;nbsp;(3).优惠券礼包中的【用户可领用次数】即为这里【共可生成抵用券的张数】。&lt;br /&gt;&lt;br /&gt;
           &amp;nbsp;(4).还可以生成券张数中的内容，为还可发放的张数。&lt;br /&gt;&lt;br /&gt;
           &amp;nbsp;&lt;font color=blue&gt;(5).发放手机号中输入的内容可以为多个手机号，手机号之前用“，”分隔，请不用输入相同的手机号码。&lt;/font&gt;&lt;br /&gt;&lt;br /&gt;
           &amp;nbsp;(6).点击【发券】按钮后，请不要再重复点击，等页面提示信息出来后，再进行其他操作,否则生成的总数是会出现错误。&lt;br /&gt;&lt;br /&gt;
           &amp;nbsp;(7).通过点击【选择】按钮，来选择需要批量生成抵用券的优惠券礼包。&lt;br /&gt;&lt;br /&gt;      &amp;nbsp;&lt;font color=blue&gt;(8).通过点击【选择文件】按钮，来选择需要批量发送电话号码的Excel文件。文件格式请参考右图所示。&lt;/font&gt;</value>
  </data>
  <data name="SendPhone" xml:space="preserve">
    <value>发放手机号：</value>
  </data>
  <data name="SendToUser" xml:space="preserve">
    <value>发放给用户</value>
  </data>
  <data name="TicketCount" xml:space="preserve">
    <value>共可生成抵用券的张数：</value>
  </data>
</root>