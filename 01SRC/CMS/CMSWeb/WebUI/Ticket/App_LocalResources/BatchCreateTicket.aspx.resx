<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="AllCreateCount" xml:space="preserve">
    <value>共可生成抵用券的张数：</value>
  </data>
  <data name="BatchCreateTicket" xml:space="preserve">
    <value>批量生产抵用券</value>
  </data>
  <data name="CodeIsNotExist" xml:space="preserve">
    <value>该优惠券代码不存在！</value>
  </data>
  <data name="CodeUseCompleted" xml:space="preserve">
    <value>所有抵用券Code使用超过数量，没法产生一个新的抵用券Code了！</value>
  </data>
  <data name="CreateTicketLabel" xml:space="preserve">
    <value>生成抵用券</value>
  </data>
  <data name="ExportTicketLabel" xml:space="preserve">
    <value>导出生产抵用券</value>
  </data>
  <data name="FiveThousandCount" xml:space="preserve">
    <value>5000张</value>
  </data>
  <data name="IfBatchCount" xml:space="preserve">
    <value>如果批量生成的张数较大，每次运行最大只生产</value>
  </data>
  <data name="LeaveCreateCount" xml:space="preserve">
    <value>还可生成券张数：</value>
  </data>
  <data name="PackageCode" xml:space="preserve">
    <value>领用券包代码：</value>
  </data>
  <data name="PromptCreateTicketFaild" xml:space="preserve">
    <value>生成抵用券失败！</value>
  </data>
  <data name="PromptCreateTicketSuccess" xml:space="preserve">
    <value>生成抵用券成功！</value>
  </data>
  <data name="PromptNoUseRule" xml:space="preserve">
    <value>该领用券中的优惠券没有关联使用规则！</value>
  </data>
  <data name="PromptPackageCannotUse" xml:space="preserve">
    <value>该优惠券礼包不可用！</value>
  </data>
  <data name="PromptTicketCodeNoEmpty" xml:space="preserve">
    <value>领用券代码不能为空！</value>
  </data>
  <data name="PromptTicketCountIsOne" xml:space="preserve">
    <value>该优惠券包内含的券和张数都必须为1！</value>
  </data>
  <data name="RemarkDescription" xml:space="preserve">
    <value>&lt;strong&gt; &amp;nbsp;批量生成抵用券的规则说明&lt;/strong&gt;&lt;br /&gt;&lt;br /&gt;
           &amp;nbsp;(1).优惠券礼包中只能包含一种金额的券，且必须为1张券。&lt;br /&gt;&lt;br /&gt;
           &amp;nbsp;(2).优惠券礼包中的【用户可领用次数】即为这里【共可生成抵用券的张数】。&lt;br /&gt;&lt;br /&gt;
           &amp;nbsp;(3).通过点击【选择】按钮，来选择需要批量生成抵用券的优惠券礼包。&lt;br /&gt;&lt;br /&gt; </value>
  </data>
  <data name="SearchLeaveCreateCount" xml:space="preserve">
    <value>查询剩余可生成张数</value>
  </data>
  <data name="TicketHavingFinish" xml:space="preserve">
    <value>该优惠券已经被领用完！</value>
  </data>
</root>